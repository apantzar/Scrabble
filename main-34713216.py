from classes import Game


def guidelines():
    """
    !!! Αυτή η έκδοση είναι η σωστή και παραδίδεται προς βαθμολόγηση !!!
    --- Η έκδοση που υποβλήθηκε από το προφιλ του Τζολόπουλος Γιώργου να μην ληφθεί υπόψιν.

    Νοΐτσης Δημήτρης 3090
    Τζολόπουλος Γιώργος 3289

    ------------------------------------------------------------------------------------


    Περιγραφή χρήσης προγράμματος.

    Το πρόγραμμα ξεκινάει με το αρχικό μενού όπου ο χρήστης μπορεί να προηγηθεί πληκτρολογώντας τα νούμερα 1,2,3 και 4
    στην επιλογή μενού. Πατώντας το 1, εμφανίζεται τα σκορ που είναι τα αποτελέσματα από τα προηγούμενα παιχνίδια του
    χρήστη, και αμέσως μετά ξανά εμφανίζεται το αρχικό μενού. Πατώντας το 2, εμφανίζεται το ένα μενού ρυθμίσεων όπου
    πάλι ο χρήστης μπορεί να προηγηθεί πληκτρολογώντας τα νούμερα 1,2,3 και 4 στην επιλογή ρυθμίσεων. Πατώντας το 1
    επιλέγει τον αλγόριθμο MIN_letters, το 2 επιλέγει τον αλγόριθμο MAX_letters, το 3 επιλέγει τον αλγόριθμο SMART και
    το 4 επιλέγει τον αλγόριθμο SMART-FAIL (ο αρχικοποιημένος αλγόριθμος είναι ο MIN_letters, οπότε αν ο χρήστης δεν τον
    αλλάξει μέσα από τις ρυθμίσεις ο υπολογιστής θα παίζει με αυτόν), και αμέσως μετά την επιλογή του χρήστη ξανά
    εμφανίζεται το αρχικό μενού. Πατώντας το 3, ξεκινάει το παιχνίδι, το ποιος θα παίζει πρώτος είναι τυχαίο, ο παίχτης
    θα βλέπει σε κάθε γύρο τα γράμματα του με τους βαθμούς τους και τον αριθμό τον γραμμάτων που έχει ο σάκος, στην
    συνέχεια θα πρέπει να σχηματίσει μια λέξη, αν η λέξεις που πληκτρολογεί δεν είναι σωστές η δεν μπορούν να
    σχηματιστούν εμφανίζονται καταλληλά μνήματα και ο παίχτης θα πρέπει να δώσει άλλη λέξη, αν δεν μπορεί να βρει
    κάποια τότε μπορεί είτε να πατήσει το γράμμα «p», όπου θα του αλλάξει τα γράμματα και θα παίξει ο επόμενος, είτε
    μπορεί να πατήσει το γράμμα «q», όπου θα τερματίσει το παιχνίδι και θα του ξανά εμφανίζεται το αρχικό μενού. Αν η
    λέξη όμως είναι σωστή τότε εμφανίζεται η βαθμολογία της λέξεις μαζί με το καινούργιο σκορ του παίχτη, στην συνέχεια
    ζητείτε από τον χρήστη να πατήσει το enter και αμέσως μετρά εμφανίζονται τα καινούργια του γράμματα, και μετά παίζει
    ο υπολογιστής.  Στον γύρο του υπολογιστή, εμφανίζονται τα γράμματα του με τους βαθμούς τους και τον αριθμό των
    γραμμάτων που έχει ο σάκος, και στην συνέχεια εμφανίζεται η λέξη που σχημάτισε ο υπολογιστής μαζί με τον βαθμό της
    και την συνολικό σκορ του, αν δεν μπορεί ο υπολογιστής να βρει λέξη τότε τερματίζεται το παιχνίδι. Όταν τελειώνει το
    παιχνίδι, εμφανίζεται το ποιος νίκησε μαζί με τα τελικά σκορ και τέλος αποθηκεύονται τα αποτελέσματα και μετά ξανά
    εμφανίζεται το αρχικό μενού. Πατώντας το 4, τερματίζετε το πρόγραμμα.


    ------------------------------------------------------------------------------------

    Περιγραφή κλάσεων προγράμματος.

    Κλάση Player αναπαριστά έναν παίκτη Scrabble και εχει τις μεθόδους:
        take_letters(self, taken_letters):
        Τα γράμματα του παίκτη εμπλουτίζονται με εισερχόμενα γράμματα.

        remove_letters(self, given_letters):
        Αφαίρεί συγκεκριμένα γράμματα από τα γράμματα του παίκτη.

        __str__(self):
        Εμφανίζει τα γράμματα του παίχτη.

        own_letters(self, word):
        Επιστρέφει true αν ο παίκτης μπορεί να σχηματίσει τη λέξη με τα
        γράμματα που διαθέτει.


    Κλάση Human αναπαριστά τον User, κληρονομει απο την κλαση Player και εχει τις μεθόδους:
        play(self, sak):
        Προσομοιώνει τον γύρο παιχνιδιού του User.

        _check_validity(self, sak):
        Ελέγχει αν η είσοδος του χρήστη ειναι έγκυρη.


    Κλάση Computer αναπαριστά τον Η/Π, κληρονομει απο την κλαση Player και εχει τις μεθόδους:
        play(self, sak):
        Προσομοιώνει τον γύρο παιχνιδιού του Η/Π.

        MIN_letters(self):
        Γυρνάει τη πρώτη λέξη με τα λιγότερα γράμματα

        MAX_letters(self):
        Γυρνάει τη πρώτη λέξη με τα περισσότερα γράμματα

         _SMART(self):
        Γυρνάει όλες τις αποδεκτές λέξεις

        SUCCESS(self):
        Γυρνάει τη καλύτερη λέξη

        FAIL(self):
        Γυρνάει τη δεύτερη καλύτερη λέξη


    Κλάση WordMaster αναπαριστά ολους τους κανόνες του παιχνιδιού σχετικά με τις λέξεις.
    Αποθηκεύουμε σε λεξικό για να έχουμε πρόσβαση σε Ο(1) και εχει τις μεθόδους:
        Στατικη μέθοδος
        value_of_letter(letter):
            Η αξία ενός γράμματος

        Στατικη μέθοδος
        def value_of_word(word):
             Η αξία μιας λέξης

        Στατικη μέθοδος
        def valid_word(word):
            Γυρνάει true , αν υπάρχει μια τέτοια λέξη.


    Κλάση SakClass αναπαριστα τον σακο με τα γράμματα και εχει τις μεθόδους:
        randomize_sak(self):
        Ανακατεύει τα γράμματα στο σάκο.

        get_letters(self, nof_letters):
        Ο σάκος δίνει nof_letters γράμματα. Αν δεν έχει τόσα, επιστρέφει None.
        Τα γράμματα αυτά βγαίνουν από το σάκο

        put_back_letters(self, letters_back):
        Ο σάκος παίρνει και γεμίζει με τα letters_back, και ανακατεύουμε.

        get_nof_letters(self):
        Επιστρεφει τον αριθμο τον γραμματων.


    Κλάση Game προσομειώνει το παιχνίδι και εχει τις μεθόδους:
        __str__(self):
        Εμφανίζει την κατάσταση του παιχνιδιού αν τελείωνε την δεδομένη στηγμή.

        setup(self):
        Αρχικοποιεί ένα παιχνίδι

        menu(self):
        Προσομοιώνει το main menu του παιχνιδιού
        Δέχετε τις εισόδους τους χρήστη και ανακατευθεύνει στις επιλογές

        settings(self):
        Προσομοιώνει το menu ρυθμίσεων του παιχνιδιού.
        Ορίζει τον αλγόριθμο με τον οποίο παίζει ο Η/Υ

        run(self):
        Προσομειώνει ένα παιχνίδι scrabble

        end(self):
        Εκτελεί τις ενέργειες τερματισμού του παιχνιδιού

        _initialize_player(self, player):
        αρχικοποιει τον παιχτη

        Στατικη μέθοδος
        load_stats():
        Διαβάζει τα στατιστικά του παίκτη

        Στατικη μέθοδος
        store_stats(stats):
        Αποθηκεύει τα στατιστικά του παίκτη στο αρχείο

    ------------------------------------------------------------------------------------

    Για την εποθήκευση των λέξεων, όπως φαίνεται και στη κλάση WordMaster που περιγράφηκε πορηγουμένως,
    χρησιμοποιούμε δομή dictionary (που υλοποιείται με hashtable) για να έχουμε πρόσβαση σε O(1) πολυπλοκότητα.
    Έτσι, οι αλγόριθμοί μας, είναι αποδοτικοί και εκετούλαι σε πραγματικό χρόνο.

    ------------------------------------------------------------------------------------

    Υλοποιήσαμε το Σενάριο 1 και Σενάριο 2 για τον αλγόριθμο του Υπολογιστή.
    Τα σενάρια δεν υλοποιήθηκαν εντελώς μη επικαλυπτόμενα. Για παράδειγμα, για την υλοποίηση του
    SMART-FAIL χρησιμοποιήθηκε η ήδη υλοποιημένη μέθοδος SMART, που φτιάχτηκε και το Σενάριο 1.

    ------------------------------------------------------------------------------------

    Σχόλια συνοδεύουν τη κάθε κλάση και μέθοδο.

    ------------------------------------------------------------------------------------

    Τα αρχεια ειναι τα:
    "main30903289.py" που περιλαμβάνει το κύριο πρόγραμμα ,
    "classes.py" που περιλαμβάνει τις κλάσεις της εργασίας και
    "greek7.txt" που περιέχει τις λέξεις της ελληνικής γλώσσας που έχουν μέχρι και 7 γράμματα.
    -- Το αρχείο "stats.json" φτιάχνεται με την πρώτη εκτέλση του κώδικα, γι αυτό δεν παραδόθηκε.
    """
    pass


if __name__ == '__main__':
    game = Game()
    game.menu()
